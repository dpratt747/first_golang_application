version: "3.9"

services:
    application:
        build: .
        ports:
            - "${APP_PORT:-8080}:${APP_PORT:-8080}"
        environment:
            - DB_PORT=${DB_PORT:-6432}
            - DB_HOST=db
            - APP_PORT=${APP_PORT:-9090}
            - RUNNING_MODE=docker
            - ENV=${ENV:-local}
            # - GIN_MODE=release
            - POSTGRES_USER=${POSTGRES_USER:-postgres}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
            - POSTGRES_DB=${POSTGRES_DB:-golang_db}
        depends_on:
            db:
                condition: service_healthy

    db:
        image: postgres:latest
        restart: unless-stopped
        environment:
            - POSTGRES_USER=${POSTGRES_USER:-postgres}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
            - POSTGRES_DB=${POSTGRES_DB:-golang_db}
        ports:
            - "${EXTERNAL_DB_PORT:-5432}:${INTERNAL_DB_PORT:-5432}"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5
## Building
# docker-compose build --no-cache

# Running the container
# docker-compose up -d postgres

## How to clean docker cache

# Kill all running containers
# docker kill $(docker ps -q)

# Delete all stopped containers
# docker rm $(docker ps -a -q)

# Delete all images
# docker rmi $(docker images -q)

# Remove unused data
# docker system prune

# Clean networks:
# docker network prune

# And some more
# docker system prune -af
